apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fanet-api-ingress
  namespace: fanet
  labels:
    app.kubernetes.io/name: fanet-backend
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/part-of: flybeeper-platform
  annotations:
    description: "Сетевые политики для FANET API - контроль входящего трафика"
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: fanet-backend
      app.kubernetes.io/component: api
  policyTypes:
  - Ingress
  ingress:
  # Трафик от Ingress Controller (nginx)
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8090
  # Трафик от мониторинга (Prometheus)
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 9090
  # Внутрикластерный трафик между подами API
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: fanet-backend
    ports:
    - protocol: TCP
      port: 8090
    - protocol: TCP
      port: 9090
  # Health checks от Kubernetes
  - from: []
    ports:
    - protocol: TCP
      port: 8090
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fanet-api-egress
  namespace: fanet
  labels:
    app.kubernetes.io/name: fanet-backend
    app.kubernetes.io/component: network-policy-egress
    app.kubernetes.io/part-of: flybeeper-platform
  annotations:
    description: "Сетевые политики для FANET API - контроль исходящего трафика"
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: fanet-backend
      app.kubernetes.io/component: api
  policyTypes:
  - Egress
  egress:
  # DNS разрешение
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Redis кластер (внутренний)
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: redis
    ports:
    - protocol: TCP
      port: 6379
  # Redis внешний (production)
  - to: []
    ports:
    - protocol: TCP
      port: 6379
  # MQTT Broker (внутренний)
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: mqtt
    ports:
    - protocol: TCP
      port: 1883
  # MQTT Broker внешний
  - to: []
    ports:
    - protocol: TCP
      port: 1883
    - protocol: TCP
      port: 8883  # MQTT over SSL
  # MySQL (внутренний и внешний)
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: mysql
    ports:
    - protocol: TCP
      port: 3306
  - to: []
    ports:
    - protocol: TCP
      port: 3306
  # Laravel API для аутентификации (HTTPS)
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # HTTP для внешних сервисов
  - to: []
    ports:
    - protocol: TCP
      port: 80
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fanet-redis-access
  namespace: fanet
  labels:
    app.kubernetes.io/name: fanet-backend
    app.kubernetes.io/component: redis-network-policy
    app.kubernetes.io/part-of: flybeeper-platform
  annotations:
    description: "Сетевые политики для Redis - разрешен доступ только от FANET API"
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: redis
  policyTypes:
  - Ingress
  ingress:
  # Доступ только от FANET API подов
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: fanet-backend
          app.kubernetes.io/component: api
    ports:
    - protocol: TCP
      port: 6379
  # Inter-cluster communication для Redis Cluster
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: redis
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 16379  # Redis Cluster bus
  # Мониторинг от Prometheus
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 6379
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fanet-deny-all-default
  namespace: fanet
  labels:
    app.kubernetes.io/name: fanet-backend
    app.kubernetes.io/component: deny-all
    app.kubernetes.io/part-of: flybeeper-platform
  annotations:
    description: "Политика по умолчанию - запретить весь трафик, который не разрешен явно"
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fanet-monitoring-access
  namespace: fanet
  labels:
    app.kubernetes.io/name: fanet-backend
    app.kubernetes.io/component: monitoring-policy
    app.kubernetes.io/part-of: flybeeper-platform
  annotations:
    description: "Доступ от систем мониторинга к метрикам"
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: fanet-backend
  policyTypes:
  - Ingress
  ingress:
  # Prometheus scraping
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - namespaceSelector:
        matchLabels:
          name: prometheus-operator
    ports:
    - protocol: TCP
      port: 9090
  # Grafana для дашбордов
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: grafana
    ports:
    - protocol: TCP
      port: 9090
  # AlertManager
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: alertmanager
    ports:
    - protocol: TCP
      port: 9090