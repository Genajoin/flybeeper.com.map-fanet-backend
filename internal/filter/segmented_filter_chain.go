package filter

import (
	"time"
	"github.com/flybeeper/fanet-backend/pkg/utils"
)

// SegmentedFilterChain –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫ –∫–∞–∂–¥–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É —Ç—Ä–µ–∫–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
type SegmentedFilterChain struct {
	config *FilterConfig
	logger *utils.Logger
}

// NewSegmentedFilterChain —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ü–µ–ø–æ—á–∫—É –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
func NewSegmentedFilterChain(config *FilterConfig, logger *utils.Logger) *SegmentedFilterChain {
	return &SegmentedFilterChain{
		config: config,
		logger: logger,
	}
}

// Filter –ø—Ä–∏–º–µ–Ω—è–µ—Ç Level 1 —Ñ–∏–ª—å—Ç—Ä—ã –∫ –∫–∞–∂–¥–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
func (s *SegmentedFilterChain) Filter(track *TrackData) (*FilterResult, error) {
	if len(track.Points) == 0 {
		return &FilterResult{
			OriginalCount: 0,
			FilteredCount: 0,
			Points:        []TrackPoint{},
			Statistics:    FilterStats{},
		}, nil
	}

	s.logger.WithField("device_id", track.DeviceID).
		WithField("total_points", len(track.Points)).
		Info("üîß STARTING SegmentedFilterChain")

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
	segmentMap := make(map[int][]int) // SegmentID -> indices
	for i, point := range track.Points {
		segmentID := point.SegmentID
		if segmentID == 0 {
			segmentID = 1 // Default segment
		}
		segmentMap[segmentID] = append(segmentMap[segmentID], i)
	}

	// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ç—Ä–µ–∫ —Å —Ç–µ–º–∏ –∂–µ —Ç–æ—á–∫–∞–º–∏
	// –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –∫–∞–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	resultPoints := make([]TrackPoint, len(track.Points))
	copy(resultPoints, track.Points)
	
	// –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –∫–∞–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
	// –¢–æ–ª—å–∫–æ —Ç–æ—á–∫–∏, –ø—Ä–æ—à–µ–¥—à–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö, –±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–µ–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ
	for i := range resultPoints {
		resultPoints[i].Filtered = true
	}

	totalFilteredCount := 0
	combinedStats := FilterStats{}
	var allSegments []SegmentInfo

	// –ü—Ä–∏–º–µ–Ω—è–µ–º Level 1 —Ñ–∏–ª—å—Ç—Ä—ã –∫ –∫–∞–∂–¥–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
	for segmentID, indices := range segmentMap {
		if len(indices) < 2 {
			// –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–æ—á–µ–∫ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ - –ø–æ–º–µ—á–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –∫–∞–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ
			s.logger.WithField("segment_id", segmentID).
				WithField("points", len(indices)).
				Debug("Filtering out segment with too few points")
			
			// –ü–æ–º–µ—á–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–æ—á–∫—É –∫–∞–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é
			for _, idx := range indices {
				resultPoints[idx].Filtered = true
				resultPoints[idx].FilterReason = "Isolated segment point"
			}
			totalFilteredCount += len(indices)
			continue
		}

		// –°–æ–∑–¥–∞–µ–º –ø–æ–¥-—Ç—Ä–µ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
		segmentPoints := make([]TrackPoint, len(indices))
		for i, idx := range indices {
			segmentPoints[i] = track.Points[idx]
			segmentPoints[i].SegmentID = segmentID // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ SegmentID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
		}

		segmentTrack := &TrackData{
			DeviceID:     track.DeviceID,
			AircraftType: track.AircraftType,
			Points:       segmentPoints,
		}

		// –°–æ–∑–¥–∞–µ–º Level 1 —Ü–µ–ø–æ—á–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
		level1Chain := NewLevel1FilterChain(s.config, s.logger)
		
		segmentResult, err := level1Chain.Filter(segmentTrack)
		if err != nil {
			s.logger.WithField("segment_id", segmentID).
				WithField("error", err).
				Warn("Failed to filter segment, keeping original points")
			continue
		}

		s.logger.WithField("segment_id", segmentID).
			WithField("original_points", len(indices)).
			WithField("filtered_points", segmentResult.FilteredCount).
			Debug("Segment filtering completed")

		// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ç—Ä–µ–∫—É
		for i, originalIdx := range indices {
			if i < len(segmentResult.Points) {
				resultPoints[originalIdx] = segmentResult.Points[i]
				resultPoints[originalIdx].SegmentID = segmentID // –°–æ—Ö—Ä–∞–Ω—è–µ–º SegmentID
			}
		}

		// –ê–∫–∫—É–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		totalFilteredCount += segmentResult.FilteredCount
		combinedStats.SpeedViolations += segmentResult.Statistics.SpeedViolations
		combinedStats.Duplicates += segmentResult.Statistics.Duplicates
		combinedStats.Outliers += segmentResult.Statistics.Outliers
		combinedStats.Teleportations += segmentResult.Statistics.Teleportations

		if segmentResult.Statistics.MaxSpeedDetected > combinedStats.MaxSpeedDetected {
			combinedStats.MaxSpeedDetected = segmentResult.Statistics.MaxSpeedDetected
		}
		if segmentResult.Statistics.MaxDistanceJump > combinedStats.MaxDistanceJump {
			combinedStats.MaxDistanceJump = segmentResult.Statistics.MaxDistanceJump
		}

		// –°–æ–∑–¥–∞–µ–º SegmentInfo –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
		validPoints := 0
		for _, point := range segmentResult.Points {
			if !point.Filtered {
				validPoints++
			}
		}
		
		if validPoints > 1 {
			// –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å–µ–≥–º–µ–Ω—Ç–∞ –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å
			var startTime, endTime time.Time
			totalDistance := 0.0
			segmentSpeed := 0.0
			speedCount := 0
			
			for i, point := range segmentResult.Points {
				if !point.Filtered {
					if startTime.IsZero() || point.Timestamp.Before(startTime) {
						startTime = point.Timestamp
					}
					if endTime.IsZero() || point.Timestamp.After(endTime) {
						endTime = point.Timestamp
					}
					
					// –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
					if i > 0 && !segmentResult.Points[i-1].Filtered {
						dist := segmentResult.Points[i-1].Position.DistanceTo(point.Position)
						totalDistance += dist
					}
					
					if point.Speed > 0 {
						segmentSpeed += point.Speed
						speedCount++
					}
				}
			}
			
			// –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞
			avgSpeed := 0.0
			if speedCount > 0 {
				avgSpeed = segmentSpeed / float64(speedCount)
			} else if endTime.Sub(startTime).Hours() > 0 {
				avgSpeed = totalDistance / endTime.Sub(startTime).Hours()
			}
			
			segmentInfo := SegmentInfo{
				ID:           segmentID,
				StartIndex:   indices[0],
				EndIndex:     indices[len(indices)-1],
				StartTime:    startTime,
				EndTime:      endTime,
				Duration:     endTime.Sub(startTime).Minutes(),
				Distance:     totalDistance,
				AvgSpeed:     avgSpeed,
				PointCount:   validPoints,
				Color:        generateSegmentColor(avgSpeed),
			}
			
			allSegments = append(allSegments, segmentInfo)
		}
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å
	validPointCount := 0
	totalSpeed := 0.0
	for _, point := range resultPoints {
		if !point.Filtered && point.Speed > 0 {
			totalSpeed += point.Speed
			validPointCount++
		}
	}
	if validPointCount > 0 {
		combinedStats.AvgSpeed = totalSpeed / float64(validPointCount)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö
	combinedStats.Segments = allSegments
	combinedStats.SegmentCount = len(segmentMap)
	combinedStats.SegmentBreaks = len(segmentMap) - 1

	// –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
	// —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –≤—Å–µ —Ç–æ—á–∫–∏ –≤–Ω–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ç–æ–∂–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
	actualFilteredCount := 0
	for _, point := range resultPoints {
		if point.Filtered {
			actualFilteredCount++
		}
	}

	result := &FilterResult{
		OriginalCount: len(track.Points),
		FilteredCount: actualFilteredCount,
		Points:        resultPoints,
		Statistics:    combinedStats,
	}

	s.logger.WithField("device_id", track.DeviceID).
		WithField("segments_processed", len(segmentMap)).
		WithField("total_filtered", actualFilteredCount).
		WithField("final_points", len(resultPoints)-actualFilteredCount).
		Info("Segmented filtering completed")

	return result, nil
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∏–ª—å—Ç—Ä–∞
func (s *SegmentedFilterChain) Name() string {
	return "SegmentedFilterChain"
}

// Description –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
func (s *SegmentedFilterChain) Description() string {
	return "Applies Level 1 filters to each track segment independently"
}

// generateSegmentColor –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
func generateSegmentColor(avgSpeed float64) string {
	return GenerateColorBySpeed(avgSpeed)
}