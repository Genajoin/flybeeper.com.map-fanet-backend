{
  "name": "FANET API Backend Dev Container",
  "dockerComposeFile": "./docker-compose.yml",
  "service": "app",
  "workspaceFolder": "/workspace",
  "shutdownAction": "stopCompose",
  
  // Features to install
  "features": {
    "ghcr.io/devcontainers/features/git:1": {},
    "ghcr.io/devcontainers/features/github-cli:1": {},
    "ghcr.io/devcontainers/features/docker-in-docker:2": {},
    "ghcr.io/devcontainers/features/common-utils:2": {
      "username": "vscode",
      "userUid": "automatic",
      "userGid": "automatic"
    }
  },

  // VS Code customizations
  "customizations": {
    "vscode": {
      "extensions": [
        // Go development
        "golang.go",
        "ms-vscode.vscode-go",
        
        // Protocol Buffers
        "zxh404.vscode-proto3",
        "pbkit.vscode-pbkit",
        
        // Docker and Kubernetes
        "ms-azuretools.vscode-docker",
        "ms-kubernetes-tools.vscode-kubernetes-tools",
        
        // Database
        "mtxr.sqltools",
        "mtxr.sqltools-driver-mysql",
        "cweijan.vscode-redis-client",
        
        // General development
        "ms-vscode.vscode-json",
        "redhat.vscode-yaml",
        "ms-vscode.vscode-typescript-next",
        "bradlc.vscode-tailwindcss",
        
        // Git and collaboration
        "eamodio.gitlens",
        "github.vscode-pull-request-github",
        
        // Testing and debugging
        "hbenl.vscode-test-explorer",
        "formulahendry.code-runner",
        
        // API development
        "humao.rest-client",
        "42crunch.vscode-openapi",
        
        // Productivity
        "ms-vscode.vscode-todo-highlight",
        "streetsidesoftware.code-spell-checker"
      ],
      
      "settings": {
        // Go settings
        "go.gopath": "/go",
        "go.goroot": "/usr/local/go",
        "go.toolsManagement.checkForUpdates": "local",
        "go.useLanguageServer": true,
        "go.formatTool": "goimports",
        "go.lintTool": "golangci-lint",
        "go.testFlags": ["-v", "-race"],
        "go.coverOnSave": false,
        "go.coverOnSingleTest": true,
        "go.coverOnSingleTestFile": true,
        "go.coverOnTestPackage": true,
        
        // Editor settings
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
          "source.organizeImports": "explicit"
        },
        "editor.rulers": [100, 120],
        "editor.insertSpaces": false,
        "editor.detectIndentation": false,
        "editor.tabSize": 4,
        
        // File associations
        "files.associations": {
          "*.proto": "proto3",
          "Dockerfile*": "dockerfile",
          "*.yml": "yaml",
          "*.yaml": "yaml"
        },
        
        // Terminal settings
        "terminal.integrated.defaultProfile.linux": "bash",
        "terminal.integrated.profiles.linux": {
          "bash": {
            "path": "/bin/bash"
          }
        }
      }
    }
  },

  // Port forwarding for development services
  "forwardPorts": [
    8090,  // FANET API
    6379,  // Redis
    1883,  // MQTT
    3306,  // MySQL
    8081,  // Redis Commander
    8082,  // Adminer
    9090,  // Prometheus
    3000   // Grafana
  ],
  
  "portsAttributes": {
    "8090": {
      "label": "FANET API",
      "protocol": "http"
    },
    "6379": {
      "label": "Redis"
    },
    "1883": {
      "label": "MQTT Broker"
    },
    "3306": {
      "label": "MySQL"
    },
    "8081": {
      "label": "Redis Commander",
      "protocol": "http"
    },
    "8082": {
      "label": "Adminer (MySQL)",
      "protocol": "http"
    },
    "9090": {
      "label": "Prometheus",
      "protocol": "http"
    },
    "3000": {
      "label": "Grafana",
      "protocol": "http"
    }
  },

  // Commands to run after container creation
  "postCreateCommand": "/workspace/.devcontainer/postCreate.sh",
  
  // Mount the local Docker socket for Docker-in-Docker
  "mounts": [
    "source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind"
  ],

  // Environment variables
  "containerEnv": {
    "GO111MODULE": "on",
    "GOPROXY": "https://proxy.golang.org,direct",
    "GOSUMDB": "sum.golang.org",
    "CGO_ENABLED": "1"
  },

  // Run as non-root user
  "remoteUser": "vscode",
  
  // Configure tool-specific properties
  "otherPortsAttributes": {
    "onAutoForward": "notify"
  }
}