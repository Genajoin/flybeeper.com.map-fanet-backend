package main

import (
	"encoding/binary"
	"encoding/hex"
	"flag"
	"fmt"
	"log"
	"math"
	"math/rand"
	"os"
	"os/signal"
	"strconv"
	"strings"
	"syscall"
	"time"

	mqtt "github.com/eclipse/paho.mqtt.golang"
)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
type TestConfig struct {
	BrokerURL     string
	ChipIDs       []string
	PacketTypes   []int
	PublishRate   time.Duration
	MaxMessages   int
	ClientID      string
	RandomSeed    int64
	StartLat      float64
	StartLon      float64
	MovementSpeed float64 // –∫–º/—á –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
}

// TestPublisher –ø—É–±–ª–∏–∫—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ MQTT —Å–æ–æ–±—â–µ–Ω–∏—è
type TestPublisher struct {
	client mqtt.Client
	config *TestConfig
	rand   *rand.Rand
	pilots map[string]*PilotState // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏–ª–æ—Ç–æ–≤
}

// PilotState —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏–ª–æ—Ç–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
type PilotState struct {
	DeviceID    string
	Latitude    float64
	Longitude   float64
	Altitude    int32
	Speed       uint16
	Heading     uint16
	ClimbRate   int16
	AircraftType uint8
	Name        string
	LastUpdate  time.Time
}

func main() {
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	var (
		brokerURL     = flag.String("broker", "tcp://localhost:1883", "MQTT broker URL")
		chipIDsStr    = flag.String("chips", "8896672,7048812,2462966788", "Chip IDs (comma-separated)")
		packetTypesStr = flag.String("types", "1,2,4,7,9", "Packet types to publish (comma-separated)")
		rate          = flag.Duration("rate", 2*time.Second, "Publish rate per pilot")
		maxMessages   = flag.Int("max", 0, "Max messages (0 = unlimited)")
		clientID      = flag.String("client", "fanet-test-publisher", "MQTT client ID")
		seed          = flag.Int64("seed", time.Now().UnixNano(), "Random seed")
		lat           = flag.Float64("lat", 46.0, "Start latitude")
		lon           = flag.Float64("lon", 13.0, "Start longitude")
		speed         = flag.Float64("speed", 50.0, "Movement speed km/h")
	)
	flag.Parse()

	// –ü–∞—Ä—Å–∏–Ω–≥ chip IDs
	chipIDs := parseStringSlice(*chipIDsStr)
	packetTypes := parseIntSlice(*packetTypesStr)

	config := &TestConfig{
		BrokerURL:     *brokerURL,
		ChipIDs:       chipIDs,
		PacketTypes:   packetTypes,
		PublishRate:   *rate,
		MaxMessages:   *maxMessages,
		ClientID:      *clientID,
		RandomSeed:    *seed,
		StartLat:      *lat,
		StartLon:      *lon,
		MovementSpeed: *speed,
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–¥–∞—Ç–µ–ª—è
	publisher, err := NewTestPublisher(config)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–¥–∞—Ç–µ–ª—è: %v", err)
	}

	fmt.Printf("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö MQTT —Å–æ–æ–±—â–µ–Ω–∏–π\n")
	fmt.Printf("üì° –ë—Ä–æ–∫–µ—Ä: %s\n", config.BrokerURL)
	fmt.Printf("üìü –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏: %v\n", config.ChipIDs)
	fmt.Printf("üì¶ –¢–∏–ø—ã –ø–∞–∫–µ—Ç–æ–≤: %v\n", config.PacketTypes)
	fmt.Printf("‚è±Ô∏è  –ß–∞—Å—Ç–æ—Ç–∞: %v –Ω–∞ –ø–∏–ª–æ—Ç–∞\n", config.PublishRate)
	fmt.Printf("üåç –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: %.4f, %.4f\n", config.StartLat, config.StartLon)
	if config.MaxMessages > 0 {
		fmt.Printf("üî¢ –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π: %d\n", config.MaxMessages)
	}
	fmt.Println()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫ –∏–∑–¥–∞—Ç–µ–ª—è
	done := make(chan bool)
	go func() {
		publisher.Start()
		done <- true
	}()

	select {
	case <-sigChan:
		fmt.Println("\n‚èπÔ∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
		publisher.Stop()
	case <-done:
		fmt.Println("\n‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	}

	fmt.Println("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
}

// NewTestPublisher —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∏–∑–¥–∞—Ç–µ–ª—å
func NewTestPublisher(config *TestConfig) (*TestPublisher, error) {
	// –°–æ–∑–¥–∞–Ω–∏–µ MQTT –∫–ª–∏–µ–Ω—Ç–∞
	opts := mqtt.NewClientOptions()
	opts.AddBroker(config.BrokerURL)
	opts.SetClientID(config.ClientID)
	opts.SetCleanSession(true)
	opts.SetAutoReconnect(true)

	client := mqtt.NewClient(opts)

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—Ä–æ–∫–µ—Ä—É
	if token := client.Connect(); token.Wait() && token.Error() != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT –±—Ä–æ–∫–µ—Ä—É: %w", token.Error())
	}

	fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ MQTT –±—Ä–æ–∫–µ—Ä—É")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏–ª–æ—Ç–æ–≤
	rng := rand.New(rand.NewSource(config.RandomSeed))
	pilots := make(map[string]*PilotState)

	for i, chipID := range config.ChipIDs {
		// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∏–ª–æ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
		for pilotNum := 1; pilotNum <= 3; pilotNum++ {
			deviceID := fmt.Sprintf("%06X", 0x100000+i*1000+pilotNum)
			pilots[deviceID] = &PilotState{
				DeviceID:     deviceID,
				Latitude:     config.StartLat + rng.Float64()*0.5 - 0.25, // ¬±0.25 –≥—Ä–∞–¥—É—Å–∞
				Longitude:    config.StartLon + rng.Float64()*0.5 - 0.25,
				Altitude:     int32(1000 + rng.Intn(2000)), // 1000-3000–º
				Speed:        uint16(30 + rng.Intn(70)),     // 30-100 –∫–º/—á
				Heading:      uint16(rng.Intn(360)),         // 0-359 –≥—Ä–∞–¥—É—Å–æ–≤
				ClimbRate:    int16(rng.Intn(60) - 30),      // ¬±3 –º/—Å * 10
				AircraftType: uint8(1 + rng.Intn(4)),        // 1-4 (–ø–∞—Ä–∞–ø–ª–∞–Ω, –¥–µ–ª—å—Ç–∞–ø–ª–∞–Ω, —à–∞—Ä, –ø–ª–∞–Ω–µ—Ä)
				Name:         fmt.Sprintf("TestPilot_%s_%d", chipID, pilotNum),
				LastUpdate:   time.Now(),
			}
		}
	}

	return &TestPublisher{
		client: client,
		config: config,
		rand:   rng,
		pilots: pilots,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
func (p *TestPublisher) Start() {
	messageCount := 0
	ticker := time.NewTicker(p.config.PublishRate)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			// –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–ª–æ—Ç–∞
			for _, pilot := range p.pilots {
				// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –±–∞–∑–æ–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é –∏ —Ç–∏–ø –ø–∞–∫–µ—Ç–∞
				chipID := p.config.ChipIDs[p.rand.Intn(len(p.config.ChipIDs))]
				packetType := p.config.PacketTypes[p.rand.Intn(len(p.config.PacketTypes))]

				// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏–ª–æ—Ç–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
				p.updatePilotState(pilot)

				// –°–æ–∑–¥–∞–µ–º –∏ –ø—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				if err := p.publishMessage(chipID, pilot, packetType); err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: %v", err)
				} else {
					messageCount++
					if messageCount%10 == 0 {
						fmt.Printf("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: %d\n", messageCount)
					}
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
				if p.config.MaxMessages > 0 && messageCount >= p.config.MaxMessages {
					fmt.Printf("üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: %d\n", messageCount)
					return
				}
			}
		}
	}
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–¥–∞—Ç–µ–ª—è
func (p *TestPublisher) Stop() {
	if p.client.IsConnected() {
		p.client.Disconnect(1000)
		fmt.Println("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç MQTT –±—Ä–æ–∫–µ—Ä–∞")
	}
}

// updatePilotState –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏–ª–æ—Ç–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
func (p *TestPublisher) updatePilotState(pilot *PilotState) {
	now := time.Now()
	dt := now.Sub(pilot.LastUpdate).Seconds()
	pilot.LastUpdate = now

	// –°–∏–º—É–ª—è—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
	speedMS := float64(pilot.Speed) / 3.6 // –∫–º/—á -> –º/—Å
	distance := speedMS * dt              // –º–µ—Ç—Ä—ã

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ, –±–µ–∑ —É—á–µ—Ç–∞ –∫—Ä–∏–≤–∏–∑–Ω—ã –ó–µ–º–ª–∏)
	headingRad := float64(pilot.Heading) * math.Pi / 180
	latDelta := distance * math.Cos(headingRad) / 111111.0 // ~111–∫–º –Ω–∞ –≥—Ä–∞–¥—É—Å
	lonDelta := distance * math.Sin(headingRad) / (111111.0 * math.Cos(pilot.Latitude*math.Pi/180))

	pilot.Latitude += latDelta
	pilot.Longitude += lonDelta

	// –°–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	if p.rand.Float64() < 0.1 { // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
		pilot.Heading = uint16((int(pilot.Heading) + p.rand.Intn(60) - 30) % 360)
	}

	if p.rand.Float64() < 0.1 { // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
		speedChange := p.rand.Intn(20) - 10
		newSpeed := int(pilot.Speed) + speedChange
		if newSpeed < 20 {
			newSpeed = 20
		}
		if newSpeed > 150 {
			newSpeed = 150
		}
		pilot.Speed = uint16(newSpeed)
	}

	// –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–±–æ—Ä–∞ –≤—ã—Å–æ—Ç—ã
	pilot.Altitude += int32(pilot.ClimbRate/10) * int32(dt)
	if pilot.Altitude < 500 {
		pilot.Altitude = 500
	}
	if pilot.Altitude > 4000 {
		pilot.Altitude = 4000
	}

	// –°–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
	if p.rand.Float64() < 0.2 {
		pilot.ClimbRate = int16(p.rand.Intn(60) - 30)
	}
}

// publishMessage –ø—É–±–ª–∏–∫—É–µ—Ç MQTT —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ FANET –ø—Ä–æ—Ç–æ–∫–æ–ª—É
func (p *TestPublisher) publishMessage(chipID string, pilot *PilotState, packetType int) error {
	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
	topic := fmt.Sprintf("fb/b/%s/f/%d", chipID, packetType)

	// –°–æ–∑–¥–∞–Ω–∏–µ payload —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
	payload, err := p.createPayload(pilot, packetType)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è payload: %w", err)
	}

	// –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
	token := p.client.Publish(topic, 0, false, payload)
	if token.Wait() && token.Error() != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ç–æ–ø–∏–∫ %s: %w", topic, token.Error())
	}

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	fmt.Printf("üì° %s -> %s: %s (pilot %s)\n", 
		chipID, topic, hex.EncodeToString(payload[:min(16, len(payload))]), pilot.DeviceID)

	return nil
}

// createPayload —Å–æ–∑–¥–∞–µ—Ç FANET payload —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
func (p *TestPublisher) createPayload(pilot *PilotState, packetType int) ([]byte, error) {
	now := time.Now()

	// –û–±–µ—Ä—Ç–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ (8 –±–∞–π—Ç)
	wrapper := make([]byte, 8)
	binary.LittleEndian.PutUint32(wrapper[0:4], uint32(now.Unix()))
	binary.LittleEndian.PutUint16(wrapper[4:6], uint16(p.rand.Intn(100)-120)) // RSSI: -120 to -20 dBm
	binary.LittleEndian.PutUint16(wrapper[6:8], uint16(p.rand.Intn(20)-5))    // SNR: -5 to +15 dB

	// FANET –ø–∞–∫–µ—Ç
	var fanetData []byte

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ (1 –±–∞–π—Ç) + –∞–¥—Ä–µ—Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (3 –±–∞–π—Ç–∞)
	header := uint8(packetType) // –¢–∏–ø –≤ –±–∏—Ç–∞—Ö 0-2
	deviceAddr, _ := strconv.ParseUint(pilot.DeviceID, 16, 32)

	fanetData = append(fanetData, header)
	fanetData = append(fanetData, byte(deviceAddr&0xFF))
	fanetData = append(fanetData, byte((deviceAddr>>8)&0xFF))
	fanetData = append(fanetData, byte((deviceAddr>>16)&0xFF))

	// Payload –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –ø–∞–∫–µ—Ç–∞
	switch packetType {
	case 1: // Air Tracking
		payload := p.createAirTrackingPayload(pilot)
		fanetData = append(fanetData, payload...)

	case 2: // Name
		payload := p.createNamePayload(pilot)
		fanetData = append(fanetData, payload...)

	case 4: // Service/Weather
		payload := p.createServicePayload()
		fanetData = append(fanetData, payload...)

	case 7: // Ground Tracking
		payload := p.createGroundTrackingPayload(pilot)
		fanetData = append(fanetData, payload...)

	case 9: // Thermal
		payload := p.createThermalPayload(pilot)
		fanetData = append(fanetData, payload...)

	default:
		return nil, fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø–∞–∫–µ—Ç–∞: %d", packetType)
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±–µ—Ä—Ç–∫—É –∏ FANET –¥–∞–Ω–Ω—ã–µ
	result := append(wrapper, fanetData...)
	return result, nil
}

// createAirTrackingPayload —Å–æ–∑–¥–∞–µ—Ç payload –¥–ª—è Type 1 (Air Tracking)
func (p *TestPublisher) createAirTrackingPayload(pilot *PilotState) []byte {
	payload := make([]byte, 11) // 11 –±–∞–π—Ç: 6(–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã) + 2(alt_status) + 1(speed) + 1(climb) + 1(heading)

	// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (3 + 3 –±–∞–π—Ç–∞)
	latRaw := int32(pilot.Latitude * 93206.04)
	lonRaw := int32(pilot.Longitude * 46603.02)

	payload[0] = byte(latRaw & 0xFF)
	payload[1] = byte((latRaw >> 8) & 0xFF)
	payload[2] = byte((latRaw >> 16) & 0xFF)

	payload[3] = byte(lonRaw & 0xFF)
	payload[4] = byte((lonRaw >> 8) & 0xFF)
	payload[5] = byte((lonRaw >> 16) & 0xFF)

	// Alt_status (2 –±–∞–π—Ç–∞) - —Å–æ–≥–ª–∞—Å–Ω–æ FANET —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
	// Bit 15: Online Tracking (1=–æ–Ω–ª–∞–π–Ω, 0=replay)
	// Bits 14-12: Aircraft Type (0-7)
	// Bit 11: Altitude scaling (0=1x, 1=4x)
	// Bits 10-0: Altitude –≤ –º–µ—Ç—Ä–∞—Ö
	
	var altStatus uint16
	altStatus |= 0x8000 // Bit 15: Online tracking = 1
	altStatus |= uint16(pilot.AircraftType&0x07) << 12 // Bits 14-12: Aircraft type
	
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ 4x scaling –¥–ª—è –≤—ã—Å–æ—Ç—ã
	altRaw := pilot.Altitude
	if altRaw > 2047 { // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è 11 –±–∏—Ç = 2047
		altStatus |= 0x0800 // Bit 11: 4x scaling
		altRaw = altRaw / 4
		if altRaw > 2047 {
			altRaw = 2047 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º
		}
	}
	altStatus |= uint16(altRaw & 0x07FF) // Bits 10-0: –≤—ã—Å–æ—Ç–∞
	
	binary.LittleEndian.PutUint16(payload[6:8], altStatus)
	
	// –°–∫–æ—Ä–æ—Å—Ç—å (1 –±–∞–π—Ç) - Byte 8
	// Bit 7: Speed scaling (0=1x, 1=5x)
	// Bits 6-0: Speed –≤ 0.5 –∫–º/—á
	var speedByte uint8
	speedVal := pilot.Speed
	if speedVal > 63 { // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è 7 –±–∏—Ç –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö 0.5 –∫–º/—á = 31.5 –∫–º/—á
		speedByte |= 0x80 // Bit 7: 5x scaling
		speedVal = speedVal / 5
		if speedVal > 63 {
			speedVal = 63
		}
	}
	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–º/—á –≤ –µ–¥–∏–Ω–∏—Ü—ã 0.5 –∫–º/—á
	speedByte |= uint8((speedVal * 2) & 0x7F) // Bits 6-0
	payload[8] = speedByte
	
	// –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (1 –±–∞–π—Ç) - Byte 9
	// Bit 7: Climb scaling (0=1x, 1=5x)
	// Bits 6-0: Climb rate –≤ 0.1 –º/—Å (signed 7-bit)
	var climbByte uint8
	climbVal := pilot.ClimbRate // —É–∂–µ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö 0.1 –º/—Å
	if climbVal > 63 || climbVal < -64 { // 7-bit signed range: -64 –¥–æ +63
		climbByte |= 0x80 // Bit 7: 5x scaling
		climbVal = climbVal / 5
		if climbVal > 63 {
			climbVal = 63
		} else if climbVal < -64 {
			climbVal = -64
		}
	}
	// 7-bit signed: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ unsigned –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
	climbByte |= uint8(climbVal & 0x7F) // Bits 6-0
	payload[9] = climbByte
	
	// –ö—É—Ä—Å (1 –±–∞–π—Ç) - Byte 10
	// 0-255 –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç 0-360¬∞
	payload[10] = byte(float32(pilot.Heading) * 256.0 / 360.0)
	
	// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (–Ω–µ –≤–∫–ª—é—á–∞–µ–º AircraftType –æ—Ç–¥–µ–ª—å–Ω–æ)
	// –¢–∏–ø –í–° —É–∂–µ –≤ alt_status

	return payload
}

// createNamePayload —Å–æ–∑–¥–∞–µ—Ç payload –¥–ª—è Type 2 (Name)
func (p *TestPublisher) createNamePayload(pilot *PilotState) []byte {
	name := pilot.Name
	if len(name) > 20 {
		name = name[:20]
	}
	return []byte(name)
}

// createServicePayload —Å–æ–∑–¥–∞–µ—Ç payload –¥–ª—è Type 4 (Service/Weather)
func (p *TestPublisher) createServicePayload() []byte {
	payload := make([]byte, 13)

	// Service Type 0: Weather
	payload[0] = 0

	// –ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
	windHeading := uint16(p.rand.Intn(360) * 182)
	windSpeed := uint16(p.rand.Intn(15) * 100)    // 0-15 –º/—Å
	windGusts := uint16(windSpeed + uint16(p.rand.Intn(5)*100))
	temperature := int16((p.rand.Intn(40) - 10) * 100) // -10 to +30¬∞C
	humidity := uint8(30 + p.rand.Intn(70))             // 30-100%
	pressure := uint16(p.rand.Intn(100))                // 1000-1100 hPa (offset)
	battery := uint8(20 + p.rand.Intn(80))              // 20-100%

	binary.LittleEndian.PutUint16(payload[1:3], windHeading)
	binary.LittleEndian.PutUint16(payload[3:5], windSpeed)
	binary.LittleEndian.PutUint16(payload[5:7], windGusts)
	binary.LittleEndian.PutUint16(payload[7:9], uint16(temperature))
	payload[9] = humidity
	binary.LittleEndian.PutUint16(payload[10:12], pressure)
	payload[12] = battery

	return payload
}

// createGroundTrackingPayload —Å–æ–∑–¥–∞–µ—Ç payload –¥–ª—è Type 7 (Ground Tracking)
func (p *TestPublisher) createGroundTrackingPayload(pilot *PilotState) []byte {
	// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Air Tracking –±–µ–∑ climb rate
	payload := make([]byte, 11)

	// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ Type 1)
	latRaw := int32(pilot.Latitude * 93206.04)
	lonRaw := int32(pilot.Longitude * 46603.02)

	payload[0] = byte(latRaw & 0xFF)
	payload[1] = byte((latRaw >> 8) & 0xFF)
	payload[2] = byte((latRaw >> 16) & 0xFF)

	payload[3] = byte(lonRaw & 0xFF)
	payload[4] = byte((lonRaw >> 8) & 0xFF)
	payload[5] = byte((lonRaw >> 16) & 0xFF)

	// –í—ã—Å–æ—Ç–∞ (2 –±–∞–π—Ç–∞)
	altRaw := uint16(pilot.Altitude - 1000)
	binary.LittleEndian.PutUint16(payload[6:8], altRaw)

	// –°–∫–æ—Ä–æ—Å—Ç—å (1 –±–∞–π—Ç)
	payload[8] = byte(pilot.Speed * 2)

	// –ö—É—Ä—Å (1 –±–∞–π—Ç)
	payload[9] = byte(float32(pilot.Heading) * 256.0 / 360.0)

	// –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ (1 –±–∞–π—Ç) - 0 –¥–ª—è –Ω–∞–∑–µ–º–Ω–æ–≥–æ
	payload[10] = 0

	return payload
}

// createThermalPayload —Å–æ–∑–¥–∞–µ—Ç payload –¥–ª—è Type 9 (Thermal)
func (p *TestPublisher) createThermalPayload(pilot *PilotState) []byte {
	payload := make([]byte, 13)

	// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ —Ç–µ—Ä–º–∏–∫–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ Type 1)
	latRaw := int32(pilot.Latitude * 93206.04)
	lonRaw := int32(pilot.Longitude * 46603.02)

	payload[0] = byte(latRaw & 0xFF)
	payload[1] = byte((latRaw >> 8) & 0xFF)
	payload[2] = byte((latRaw >> 16) & 0xFF)

	payload[3] = byte(lonRaw & 0xFF)
	payload[4] = byte((lonRaw >> 8) & 0xFF)
	payload[5] = byte((lonRaw >> 16) & 0xFF)

	// –í—ã—Å–æ—Ç–∞ —Ç–µ—Ä–º–∏–∫–∞ (2 –±–∞–π—Ç–∞) - –±–µ–∑ offset
	binary.LittleEndian.PutUint16(payload[6:8], uint16(pilot.Altitude))

	// –ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Ä–º–∏–∫–∞ (1 –±–∞–π—Ç): 0-5
	payload[8] = uint8(p.rand.Intn(6))

	// –°—Ä–µ–¥–Ω–∏–π –ø–æ–¥—ä–µ–º (2 –±–∞–π—Ç–∞): –º/—Å * 100
	avgClimb := int16(100 + p.rand.Intn(400)) // 1-5 –º/—Å
	binary.LittleEndian.PutUint16(payload[9:11], uint16(avgClimb))

	// –í–µ—Ç–µ—Ä (4 –±–∞–π—Ç–∞) - –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ ThermalData —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
	// –ù–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –ø–∞–∫–µ—Ç–∞
	windSpeed := uint16(p.rand.Intn(10) * 100)  // 0-10 –º/—Å
	windHeading := uint16(p.rand.Intn(360) * 182)
	binary.LittleEndian.PutUint16(payload[11:13], windSpeed)
	// –°–æ–∫—Ä–∞—â–∞–µ–º –¥–æ 13 –±–∞–π—Ç, —Ç–∞–∫ –∫–∞–∫ windHeading –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è
	_ = windHeading

	return payload
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

func parseStringSlice(s string) []string {
	if s == "" {
		return []string{}
	}
	return strings.Split(s, ",")
}

func parseIntSlice(s string) []int {
	if s == "" {
		return []int{}
	}
	strs := strings.Split(s, ",")
	ints := make([]int, len(strs))
	for i, str := range strs {
		val, err := strconv.Atoi(strings.TrimSpace(str))
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–ª–∞ '%s': %v", str, err)
		}
		ints[i] = val
	}
	return ints
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

